'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WebSocket = require('ws');
var fs = require('fs');

var WebSocketServer = function () {
  function WebSocketServer() {
    _classCallCheck(this, WebSocketServer);
  }

  _createClass(WebSocketServer, [{
    key: 'start',
    value: function start(port) {
      var _this = this;

      var wss = new WebSocket.Server({ port: port || 8080 });
      this.ws = null;
      wss.on('connection', function (ws) {
        ws.on('message', function (message) {
          var json = JSON.parse(message);
          fs.writeFileSync(json.fileName, message, 'utf8');
        });
        _this.ws = ws;
      });
      process.on('message', function (message) {
        if (message === 'exit') {
          wss.close();
          return;
        }
        if (_this.ws) {
          _this.ws.send(message);
        }
      });
    }
  }]);

  return WebSocketServer;
}();

var server = new WebSocketServer();
server.start(process.env.asrport);