'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _dec2, _dec3, _dec4, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3;

var _flowRuntime = require('flow-runtime');

var _flowRuntime2 = _interopRequireDefault(_flowRuntime);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _initDefineProp(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function _initializerWarningHelper(descriptor, context) {
  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

var tempWrite = require('temp-write');
var sleep = require('sleep');
var fs = require('fs');

var DumpTouple = _flowRuntime2.default.type('DumpTouple', _flowRuntime2.default.tuple(_flowRuntime2.default.string(), _flowRuntime2.default.string()));

module.exports = (_dec = _flowRuntime2.default.annotate(_flowRuntime2.default.class('RNAsyncStorage', _flowRuntime2.default.property('queNo', _flowRuntime2.default.number()), _flowRuntime2.default.property('que', _flowRuntime2.default.object(_flowRuntime2.default.indexer('key', _flowRuntime2.default.number(), _flowRuntime2.default.object()))), _flowRuntime2.default.property('timeout', _flowRuntime2.default.number()), _flowRuntime2.default.method('constructor', _flowRuntime2.default.param('props', _flowRuntime2.default.object(_flowRuntime2.default.property('timeout', _flowRuntime2.default.number(), true)))), _flowRuntime2.default.method('getAllKeys', _flowRuntime2.default.return(_flowRuntime2.default.array(_flowRuntime2.default.string()))), _flowRuntime2.default.method('getItem', _flowRuntime2.default.param('key', _flowRuntime2.default.string())), _flowRuntime2.default.method('setItem', _flowRuntime2.default.param('key', _flowRuntime2.default.string()), _flowRuntime2.default.param('value', _flowRuntime2.default.string())), _flowRuntime2.default.method('removeItem', _flowRuntime2.default.param('key', _flowRuntime2.default.string())), _flowRuntime2.default.method('mergeItem', _flowRuntime2.default.param('key', _flowRuntime2.default.string()), _flowRuntime2.default.param('value', _flowRuntime2.default.string())), _flowRuntime2.default.method('clear'), _flowRuntime2.default.method('flushGetRequests'), _flowRuntime2.default.method('multiGet', _flowRuntime2.default.param('keys', _flowRuntime2.default.array(_flowRuntime2.default.string()))), _flowRuntime2.default.method('multiSet', _flowRuntime2.default.param('keyValuePairs', _flowRuntime2.default.array(DumpTouple))), _flowRuntime2.default.method('multiRemove', _flowRuntime2.default.param('keys', _flowRuntime2.default.array(_flowRuntime2.default.string()))), _flowRuntime2.default.method('multiMerge', _flowRuntime2.default.param('keyValuePairs', _flowRuntime2.default.array(_flowRuntime2.default.array(_flowRuntime2.default.string())))), _flowRuntime2.default.method('dump'), _flowRuntime2.default.method('load', _flowRuntime2.default.param('data', _flowRuntime2.default.array(DumpTouple))), _flowRuntime2.default.method('sendToRN', _flowRuntime2.default.param('apiName', _flowRuntime2.default.string()), _flowRuntime2.default.param('args', _flowRuntime2.default.array(_flowRuntime2.default.mixed())), _flowRuntime2.default.return(_flowRuntime2.default.nullable(_flowRuntime2.default.any()))), _flowRuntime2.default.method('_resolveMessageFromRN', _flowRuntime2.default.param('fileName', _flowRuntime2.default.any())), _flowRuntime2.default.method('_exit'))), _dec2 = _flowRuntime2.default.decorate(_flowRuntime2.default.number()), _dec3 = _flowRuntime2.default.decorate(_flowRuntime2.default.object(_flowRuntime2.default.indexer('key', _flowRuntime2.default.number(), _flowRuntime2.default.object()))), _dec4 = _flowRuntime2.default.decorate(_flowRuntime2.default.number()), _dec(_class = (_class2 = function () {
  function RNAsyncStorage() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, RNAsyncStorage);

    _initDefineProp(this, 'queNo', _descriptor, this);

    _initDefineProp(this, 'que', _descriptor2, this);

    _initDefineProp(this, 'timeout', _descriptor3, this);

    var _propsType = _flowRuntime2.default.object(_flowRuntime2.default.property('timeout', _flowRuntime2.default.number(), true));

    _flowRuntime2.default.param('props', _propsType).assert(props);

    this.queNo = 0;
    this.que = {};
    this.timeout = props.timeout || 10;
  }

  _createClass(RNAsyncStorage, [{
    key: 'getAllKeys',
    value: function getAllKeys() {
      var _returnType = _flowRuntime2.default.return(_flowRuntime2.default.array(_flowRuntime2.default.string()));

      var result = this.sendToRN('getAllKeys');
      return _returnType.assert(result || []);
    }
  }, {
    key: 'getItem',
    value: function getItem(key) {
      var _keyType = _flowRuntime2.default.string();

      _flowRuntime2.default.param('key', _keyType).assert(key);

      return this.sendToRN('getItem', [key]);
    }
  }, {
    key: 'setItem',
    value: function setItem(key, value) {
      var _keyType2 = _flowRuntime2.default.string();

      var _valueType = _flowRuntime2.default.string();

      _flowRuntime2.default.param('key', _keyType2).assert(key);

      _flowRuntime2.default.param('value', _valueType).assert(value);

      return this.sendToRN('setItem', [key, value]);
    }
  }, {
    key: 'removeItem',
    value: function removeItem(key) {
      var _keyType3 = _flowRuntime2.default.string();

      _flowRuntime2.default.param('key', _keyType3).assert(key);

      return this.sendToRN('removeItem', [key]);
    }
  }, {
    key: 'mergeItem',
    value: function mergeItem(key, value) {
      var _keyType4 = _flowRuntime2.default.string();

      var _valueType2 = _flowRuntime2.default.string();

      _flowRuntime2.default.param('key', _keyType4).assert(key);

      _flowRuntime2.default.param('value', _valueType2).assert(value);

      return this.sendToRN('mergeItem', [key, value]);
    }
  }, {
    key: 'clear',
    value: function clear() {
      return this.sendToRN('clear');
    }
  }, {
    key: 'flushGetRequests',
    value: function flushGetRequests() {
      return this.sendToRN('flushGetRequests');
    }
  }, {
    key: 'multiGet',
    value: function multiGet(keys) {
      var _keysType = _flowRuntime2.default.array(_flowRuntime2.default.string());

      _flowRuntime2.default.param('keys', _keysType).assert(keys);

      return this.sendToRN('multiGet', [keys]);
    }
  }, {
    key: 'multiSet',
    value: function multiSet(keyValuePairs) {
      var _keyValuePairsType = _flowRuntime2.default.array(DumpTouple);

      _flowRuntime2.default.param('keyValuePairs', _keyValuePairsType).assert(keyValuePairs);

      return this.sendToRN('multiSet', [keyValuePairs]);
    }
  }, {
    key: 'multiRemove',
    value: function multiRemove(keys) {
      var _keysType2 = _flowRuntime2.default.array(_flowRuntime2.default.string());

      _flowRuntime2.default.param('keys', _keysType2).assert(keys);

      return this.sendToRN('multiRemove', [keys]);
    }
  }, {
    key: 'multiMerge',
    value: function multiMerge(keyValuePairs) {
      var _keyValuePairsType2 = _flowRuntime2.default.array(_flowRuntime2.default.array(_flowRuntime2.default.string()));

      _flowRuntime2.default.param('keyValuePairs', _keyValuePairsType2).assert(keyValuePairs);

      return this.sendToRN('multiMerge', [keyValuePairs]);
    }
  }, {
    key: 'dump',
    value: function dump() {
      return this.sendToRN('dump');
    }
  }, {
    key: 'load',
    value: function load(data) {
      var _dataType = _flowRuntime2.default.array(DumpTouple);

      _flowRuntime2.default.param('data', _dataType).assert(data);

      return this.multiSet(data);
    }
  }, {
    key: 'sendToRN',
    value: function sendToRN(apiName) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      var _apiNameType = _flowRuntime2.default.string();

      var _argsType = _flowRuntime2.default.array(_flowRuntime2.default.mixed());

      var _returnType2 = _flowRuntime2.default.return(_flowRuntime2.default.nullable(_flowRuntime2.default.any()));

      _flowRuntime2.default.param('apiName', _apiNameType).assert(apiName);

      _flowRuntime2.default.param('args', _argsType).assert(args);

      var queId = ++this.queNo;
      var fileName = tempWrite.sync('');
      this.que[queId] = { fileName: fileName };
      _ayncStorageWebSocketServer.send(JSON.stringify({ apiName: apiName, queId: queId, fileName: fileName, args: args }));
      return _returnType2.assert(this._resolveMessageFromRN(fileName));
    }
  }, {
    key: '_resolveMessageFromRN',
    value: function _resolveMessageFromRN(fileName) {
      var json = {};
      var received = false;
      for (var i = 0; i < this.timeout; i++) {
        sleep.msleep(100);
        var fileContent = fs.readFileSync(fileName, 'utf8');
        if (fileContent) {
          json = JSON.parse(fileContent);
          delete this.que[Number(json.queId)];
          received = true;
          break;
        }
        sleep.msleep(900);
      }
      fs.unlinkSync(fileName);
      if (!received) {
        throw new Error("can't receive response from ReactNative Application");
      }
      if (json.error === 1) {
        throw new Error(json.message);
      }
      return json.result;
    }
  }, {
    key: '_exit',
    value: function _exit() {
      return Promise.all(Object.values(this.que).map(function (que) {
        return new Promise(function (resolve) {
          if (que && (typeof que === 'undefined' ? 'undefined' : _typeof(que)) === 'object' && typeof que.fileName === 'string') {
            fs.unlink(que.fileName, function () {
              return resolve();
            });
          } else {
            resolve();
          }
        });
      }));
    }
  }]);

  return RNAsyncStorage;
}(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'queNo', [_dec2], {
  enumerable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'que', [_dec3], {
  enumerable: true,
  initializer: null
}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'timeout', [_dec4], {
  enumerable: true,
  initializer: null
})), _class2)) || _class);